// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensor.proto

package lib

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Dht22 struct {
	Temperature          float32  `protobuf:"fixed32,1,opt,name=Temperature,proto3" json:"Temperature,omitempty"`
	Humidity             float32  `protobuf:"fixed32,2,opt,name=Humidity,proto3" json:"Humidity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dht22) Reset()         { *m = Dht22{} }
func (m *Dht22) String() string { return proto.CompactTextString(m) }
func (*Dht22) ProtoMessage()    {}
func (*Dht22) Descriptor() ([]byte, []int) {
	return fileDescriptor_sensor_cb2b683815b2b8c1, []int{0}
}
func (m *Dht22) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dht22.Unmarshal(m, b)
}
func (m *Dht22) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dht22.Marshal(b, m, deterministic)
}
func (dst *Dht22) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dht22.Merge(dst, src)
}
func (m *Dht22) XXX_Size() int {
	return xxx_messageInfo_Dht22.Size(m)
}
func (m *Dht22) XXX_DiscardUnknown() {
	xxx_messageInfo_Dht22.DiscardUnknown(m)
}

var xxx_messageInfo_Dht22 proto.InternalMessageInfo

func (m *Dht22) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *Dht22) GetHumidity() float32 {
	if m != nil {
		return m.Humidity
	}
	return 0
}

type SensorReading struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Location             string   `protobuf:"bytes,2,opt,name=Location,proto3" json:"Location,omitempty"`
	Dht22                *Dht22   `protobuf:"bytes,3,opt,name=dht22,proto3" json:"dht22,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorReading) Reset()         { *m = SensorReading{} }
func (m *SensorReading) String() string { return proto.CompactTextString(m) }
func (*SensorReading) ProtoMessage()    {}
func (*SensorReading) Descriptor() ([]byte, []int) {
	return fileDescriptor_sensor_cb2b683815b2b8c1, []int{1}
}
func (m *SensorReading) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorReading.Unmarshal(m, b)
}
func (m *SensorReading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorReading.Marshal(b, m, deterministic)
}
func (dst *SensorReading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorReading.Merge(dst, src)
}
func (m *SensorReading) XXX_Size() int {
	return xxx_messageInfo_SensorReading.Size(m)
}
func (m *SensorReading) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorReading.DiscardUnknown(m)
}

var xxx_messageInfo_SensorReading proto.InternalMessageInfo

func (m *SensorReading) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SensorReading) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *SensorReading) GetDht22() *Dht22 {
	if m != nil {
		return m.Dht22
	}
	return nil
}

func init() {
	proto.RegisterType((*Dht22)(nil), "Dht22")
	proto.RegisterType((*SensorReading)(nil), "SensorReading")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SensorReportingServiceClient is the client API for SensorReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorReportingServiceClient interface {
	StreamReadings(ctx context.Context, opts ...grpc.CallOption) (SensorReportingService_StreamReadingsClient, error)
}

type sensorReportingServiceClient struct {
	cc *grpc.ClientConn
}

func NewSensorReportingServiceClient(cc *grpc.ClientConn) SensorReportingServiceClient {
	return &sensorReportingServiceClient{cc}
}

func (c *sensorReportingServiceClient) StreamReadings(ctx context.Context, opts ...grpc.CallOption) (SensorReportingService_StreamReadingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorReportingService_serviceDesc.Streams[0], "/SensorReportingService/StreamReadings", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorReportingServiceStreamReadingsClient{stream}
	return x, nil
}

type SensorReportingService_StreamReadingsClient interface {
	Send(*SensorReading) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type sensorReportingServiceStreamReadingsClient struct {
	grpc.ClientStream
}

func (x *sensorReportingServiceStreamReadingsClient) Send(m *SensorReading) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensorReportingServiceStreamReadingsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorReportingServiceServer is the server API for SensorReportingService service.
type SensorReportingServiceServer interface {
	StreamReadings(SensorReportingService_StreamReadingsServer) error
}

func RegisterSensorReportingServiceServer(s *grpc.Server, srv SensorReportingServiceServer) {
	s.RegisterService(&_SensorReportingService_serviceDesc, srv)
}

func _SensorReportingService_StreamReadings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorReportingServiceServer).StreamReadings(&sensorReportingServiceStreamReadingsServer{stream})
}

type SensorReportingService_StreamReadingsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*SensorReading, error)
	grpc.ServerStream
}

type sensorReportingServiceStreamReadingsServer struct {
	grpc.ServerStream
}

func (x *sensorReportingServiceStreamReadingsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensorReportingServiceStreamReadingsServer) Recv() (*SensorReading, error) {
	m := new(SensorReading)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SensorReportingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SensorReportingService",
	HandlerType: (*SensorReportingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReadings",
			Handler:       _SensorReportingService_StreamReadings_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sensor.proto",
}

func init() { proto.RegisterFile("sensor.proto", fileDescriptor_sensor_cb2b683815b2b8c1) }

var fileDescriptor_sensor_cb2b683815b2b8c1 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x4f, 0xbf, 0x4b, 0xc3, 0x40,
	0x14, 0x26, 0x29, 0x29, 0xf6, 0x55, 0x33, 0xdc, 0x50, 0x42, 0x74, 0x08, 0x9d, 0x32, 0x5d, 0x21,
	0x6e, 0x8e, 0x62, 0xc1, 0x82, 0xd3, 0xa5, 0x8b, 0x6e, 0x49, 0xef, 0x19, 0x0f, 0x9a, 0xbc, 0xe3,
	0xf2, 0x22, 0xf4, 0xbf, 0x97, 0x5c, 0x6c, 0xd0, 0xf1, 0xfb, 0x3e, 0xbe, 0x5f, 0x70, 0xdb, 0x63,
	0xd7, 0x93, 0x93, 0xd6, 0x11, 0x53, 0x7a, 0xdf, 0x10, 0x35, 0x67, 0xdc, 0x79, 0x54, 0x0f, 0x9f,
	0x3b, 0x6c, 0x2d, 0x5f, 0x26, 0x71, 0xbb, 0x87, 0xe8, 0xe5, 0x8b, 0x8b, 0x42, 0x64, 0xb0, 0x3e,
	0x62, 0x6b, 0xd1, 0x55, 0x3c, 0x38, 0x4c, 0x82, 0x2c, 0xc8, 0x43, 0xf5, 0x97, 0x12, 0x29, 0xdc,
	0xbc, 0x0e, 0xad, 0xd1, 0x86, 0x2f, 0x49, 0xe8, 0xe5, 0x19, 0x6f, 0xdf, 0xe1, 0xae, 0xf4, 0x9d,
	0x0a, 0x2b, 0x6d, 0xba, 0x46, 0xc4, 0x10, 0x1e, 0xb4, 0x4f, 0x59, 0xa9, 0xf0, 0xa0, 0x47, 0xf3,
	0x1b, 0x9d, 0x2a, 0x36, 0xd4, 0x79, 0xf3, 0x4a, 0xcd, 0x58, 0x3c, 0x40, 0xa4, 0xc7, 0x0d, 0xc9,
	0x22, 0x0b, 0xf2, 0x75, 0xb1, 0x94, 0x7e, 0x91, 0x9a, 0xc8, 0xe2, 0x08, 0x9b, 0x6b, 0xb4, 0x25,
	0xc7, 0xa6, 0x6b, 0x4a, 0x74, 0xdf, 0xe6, 0x84, 0xe2, 0x09, 0xe2, 0x92, 0x1d, 0x56, 0xed, 0x6f,
	0x69, 0x2f, 0x62, 0xf9, 0x6f, 0x45, 0xba, 0x91, 0xd3, 0x77, 0x79, 0xfd, 0x2e, 0xf7, 0xe3, 0xf7,
	0x3c, 0x78, 0x8e, 0x3e, 0x16, 0x67, 0x53, 0xd7, 0x4b, 0x2f, 0x3c, 0xfe, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xfc, 0x05, 0xb1, 0xfd, 0x32, 0x01, 0x00, 0x00,
}
